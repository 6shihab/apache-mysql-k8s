name: Build and Push Docker Image

on:
  push:
    branches:
      - main # or your default branch
  # Optionally, you can use a different trigger, such as on every push to any branch or on a schedule
  # schedule:
  #   - cron: '0 0 * * *' # This will run daily at midnight

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
        
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/apache-mysql-k8s-new:latest
      
      - name: Install civo CLI
        uses: civo/action-civo@v1.0.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        with:
          token: ${{ secrets.CIVO_TOKEN }}

      - name: install kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
  
      # - name: Create deployment.yaml
      #   run: |
      #     cat <<EOF > nginx-deployment.yaml
      #     apiVersion: apps/v1
      #     kind: Deployment
      #     metadata:
      #       name: nginx-deployment
      #     spec:
      #       replicas: 3
      #       selector:
      #         matchLabels:
      #           app: nginx
      #       template:
      #         metadata:
      #           labels:
      #             app: nginx
      #         spec:
      #           containers:
      #             - name: nginx
      #               image: nginx:latest
      #               ports:
      #                 - containerPort: 80        
      #     EOF
      #     kubectl apply -f nginx-deployment.yaml
        
      - name: Get Pods
        run: |
          kubectl get pods
          echo "login_port: ${{ env.login_port }}"
   
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Update Ingress
        run: |
          # Fetch the current Ingress configuration
          kubectl get ingress my-app-ingress -o json > ingress.json
   
          # Print the current Ingress configuration
          echo "Current Ingress configuration:"
          cat ingress.json
   
          # Use jq to append the new rule and update the ManagedCertificate annotation
          jq '.spec.rules += [{"host": "${{ github.run_number }}.cloud.dantisai.com", "http": {"paths": [{"pathType": "Prefix", "path": "/", "backend": {"service": {"name": "my-app-service-${{ github.run_number }}", "port": {"number": 3000}}}}]}}]' ingress.json > new_ingress.json
          jq '.spec.tls += [{"hosts":["${{ github.run_number }}.cloud.dantisai.com"],"secretName":"my-managed-cert-${{ github.run_number }}-tls"}]' new_ingress.json > updated_ingress.json 
          # Print the updated Ingress configuration
          echo "Updated Ingress configuration:"
          cat updated_ingress.json
